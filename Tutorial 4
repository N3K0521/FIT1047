/ ************************* Tutorial 4 *************************** /

***************************************************************************
/ Task 1 Conditionals
/ A conditional statement allows the flow of a program to depend on data. In a high-level
/ programming language, this is typically achieved using if-then-else statements such as the
/ following (this is Python syntax):

if X == Y:
    X = X + Y
else:
    Y = Y + X

/ Implement this piece of code using MARIE assembly. Make use of labels
***************************************************************************
/ Task 1

/ If X == Y: X = X + Y Else: Y = X + Y
Load X
Subt Y
/ Test if X - Y == 0
Skipcond 400
Jump Else
/ X == Y
Load X
Add Y
Store X
Jump end

/ X != Y so Y = X + Y
Else, Load Y
    Add X
    Store Y
    Jump end

/ Print X and Y then halt
end, Load X
    Output
    Load Y
    Output
    Halt

/Variables
X, DEC 5
Y, DEC 5
******************************************************************************
/ Method 2

Input
Store X
Input
Store Y
Load X
Subt Y
Skipcond 400
Jump False
Load X
Add Y
Store X
Halt

False, Load Y
    Add X
    Store Y
    Halt

X, Dec 0
Y, Dec 0
*******************************************************************************
/ Task 2.2

Input
Store X
Load X
Store Y
JnS Double
Load Y
Store X
Load X
Output
Halt

/ Variables
X, Dec 0 
Y, Dec 0

/ Double Subroutine
Double, Hex 0 
        Load Y
        Add Y
        Store Y
        JumpI Double
********************************************************************************
/ Task 2.3

/ The Main Code
Input
Store multA
Input
Store multB
Jns Mult
Load multC
Output
Halt

/ Multiplication Subroutine
Mult,   Hex 0
        Clear
        Store multC
Loop,   Load multA
        Skipcond 800
        Jump end
        Load multC
        Add multB
        Store multC
        Load multA
        Subt One
        Store multA
        Jump Loop

End,    JumpI Mult

/ Variables
multA, Dec 0
multB, Dec 0
multC, Dec 0
One, Dec 0
*********************************************************************************
/ Task 2.4

*********************************************************************************
/ Task 3
/ SkipIfGreater X skips the next instruction if the value at memory address X is greater than the value in AC
/ Give the RTL steps needed to implement the instruction

Fetch
Mar <- X
MBR <- M[MAR]
AC  <- AC - MBR
if AC < 0, then PC <- PC + 1