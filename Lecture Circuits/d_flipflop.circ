<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="2.13.8" version="1.0">
This file is intended to be loaded by Logisim-evolution (https://github.com/reds-heig/logisim-evolution).
<lib desc="#Wiring" name="0">
    <tool name="Splitter">
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
      <a name="bit3" val="2"/>
    </tool>
    <tool name="Pin">
      <a name="output" val="true"/>
    </tool>
    <tool name="Constant">
      <a name="value" val="0x0"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2">
    <tool name="Multiplexer">
      <a name="enable" val="false"/>
    </tool>
    <tool name="Demultiplexer">
      <a name="enable" val="false"/>
    </tool>
  </lib>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4">
    <tool name="ROM">
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="#I/O" name="5"/>
  <lib desc="#HDL-IP" name="6">
    <tool name="VHDL Entity">
      <a name="content">--------------------------------------------------------------------------------&#13;
-- HEIG-VD, institute REDS, 1400 Yverdon-les-Bains&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
library ieee;&#13;
  use ieee.std_logic_1164.all;&#13;
  --use ieee.numeric_std.all;&#13;
&#13;
entity VHDL_Component is&#13;
  port(&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    horloge_i  : in  std_logic;                    -- input bit example&#13;
    val_i      : in  std_logic_vector(3 downto 0); -- input vector example&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert output ports below&#13;
    max_o      : out std_logic;                    -- output bit example&#13;
    cpt_o      : out std_logic_Vector(3 downto 0)  -- output vector example&#13;
    );&#13;
end VHDL_Component;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
architecture type_architecture of VHDL_Component is&#13;
&#13;
&#13;
begin&#13;
&#13;
&#13;
end type_architecture;&#13;
</a>
    </tool>
  </lib>
  <lib desc="#TCL" name="7">
    <tool name="TclGeneric">
      <a name="content">library ieee;
use ieee.std_logic_1164.all;

entity TCL_Generic is
  port(
    --Insert input ports below
    horloge_i  : in  std_logic;                    -- input bit example
    val_i      : in  std_logic_vector(3 downto 0); -- input vector example

	  --Insert output ports below
    max_o      : out std_logic;                    -- output bit example
    cpt_o      : out std_logic_Vector(3 downto 0)  -- output vector example
  );
end TCL_Generic;
</a>
    </tool>
  </lib>
  <lib desc="#Base" name="8">
    <tool name="Text Tool">
      <a name="text" val=""/>
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
    <a name="tickmain" val="half_period"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Text Tool">
      <a name="text" val=""/>
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="valign" val="base"/>
    </tool>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
    </tool>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
  </toolbar>
  <circuit name="main">
    <a name="circuit" val="main"/>
    <a name="clabel" val=""/>
    <a name="clabelup" val="east"/>
    <a name="clabelfont" val="SansSerif bold 16"/>
    <a name="circuitvhdl" val="false"/>
    <a name="circuitvhdlpath" val=""/>
    <wire from="(440,340)" to="(490,340)"/>
    <wire from="(170,230)" to="(170,240)"/>
    <wire from="(170,230)" to="(290,230)"/>
    <wire from="(170,300)" to="(290,300)"/>
    <wire from="(270,160)" to="(390,160)"/>
    <wire from="(270,260)" to="(390,260)"/>
    <wire from="(270,340)" to="(390,340)"/>
    <wire from="(470,270)" to="(590,270)"/>
    <wire from="(550,320)" to="(590,320)"/>
    <wire from="(270,170)" to="(270,190)"/>
    <wire from="(270,350)" to="(270,370)"/>
    <wire from="(270,260)" to="(270,280)"/>
    <wire from="(270,140)" to="(270,160)"/>
    <wire from="(270,320)" to="(270,340)"/>
    <wire from="(470,250)" to="(470,270)"/>
    <wire from="(470,280)" to="(470,300)"/>
    <wire from="(270,170)" to="(370,170)"/>
    <wire from="(270,350)" to="(370,350)"/>
    <wire from="(390,210)" to="(490,210)"/>
    <wire from="(470,280)" to="(570,280)"/>
    <wire from="(350,390)" to="(390,390)"/>
    <wire from="(350,210)" to="(390,210)"/>
    <wire from="(200,100)" to="(200,320)"/>
    <wire from="(550,230)" to="(570,230)"/>
    <wire from="(200,100)" to="(290,100)"/>
    <wire from="(270,320)" to="(290,320)"/>
    <wire from="(270,280)" to="(290,280)"/>
    <wire from="(270,140)" to="(290,140)"/>
    <wire from="(270,370)" to="(290,370)"/>
    <wire from="(270,190)" to="(290,190)"/>
    <wire from="(350,120)" to="(370,120)"/>
    <wire from="(350,300)" to="(370,300)"/>
    <wire from="(470,300)" to="(490,300)"/>
    <wire from="(470,250)" to="(490,250)"/>
    <wire from="(440,300)" to="(440,340)"/>
    <wire from="(150,240)" to="(170,240)"/>
    <wire from="(570,230)" to="(640,230)"/>
    <wire from="(390,210)" to="(390,260)"/>
    <wire from="(390,340)" to="(390,390)"/>
    <wire from="(150,410)" to="(290,410)"/>
    <wire from="(390,160)" to="(390,210)"/>
    <wire from="(370,120)" to="(370,170)"/>
    <wire from="(370,300)" to="(370,350)"/>
    <wire from="(200,320)" to="(270,320)"/>
    <wire from="(570,230)" to="(570,280)"/>
    <wire from="(590,270)" to="(590,320)"/>
    <wire from="(170,240)" to="(170,300)"/>
    <wire from="(370,300)" to="(440,300)"/>
    <comp lib="8" loc="(66,192)" name="Text">
      <a name="text" val="Clock = 1 (Write) "/>
    </comp>
    <comp lib="1" loc="(350,210)" name="NAND Gate"/>
    <comp lib="8" loc="(87,250)" name="Text">
      <a name="text" val="Clock"/>
      <a name="font" val="SansSerif plain 18"/>
    </comp>
    <comp lib="1" loc="(550,320)" name="NAND Gate"/>
    <comp lib="8" loc="(648,208)" name="Text">
      <a name="text" val="Output"/>
      <a name="font" val="SansSerif plain 18"/>
    </comp>
    <comp lib="1" loc="(350,120)" name="NAND Gate"/>
    <comp lib="1" loc="(350,390)" name="NAND Gate"/>
    <comp lib="8" loc="(4614,549)" name="Text">
      <a name="text" val="Classical positive-edge-triggered D flip-flop A positive-edge-triggered D flip-flop  This circuit[26] consists of two stages implemented by SR NAND latches. The input stage (the two latches on the left) processes the clock and data signals to ensure correct input signals for the output stage (the single latch on the right). If the clock is low, both the output signals of the input stage are high regardless of the data input; the output latch is unaffected and it stores the previous state. When the clock signal changes from low to high, only one of the output voltages (depending on the data signal) goes low and sets/resets the output latch: if D = 0, the lower output becomes low; if D = 1, the upper output becomes low. If the clock signal continues staying high, the outputs keep their states regardless of the data input and force the output latch to stay in the corresponding state as the input logical zero (of the output stage) remains active while the clock is high. Hence the role of the output latch is to store the data only while the clock is low.  The circuit is closely related to the gated D latch as both the circuits convert the two D input states (0 and 1) to two input combinations (01 and 10) for the output SR latch by inverting the data input signal (both the circuits split the single D signal in two complementary S and R signals). The difference is that in the gated D latch simple NAND logical gates are used while in the positive-edge-triggered D flip-flop SR NAND latches are used for this purpose. The role of these latches is to &quot;lock&quot; the active output producing low voltage (a logical zero); thus the positive-edge-triggered D flip-flop can also be thought of as a gated D latch with latched input gates. "/>
    </comp>
    <comp lib="1" loc="(350,300)" name="NAND Gate">
      <a name="inputs" val="3"/>
    </comp>
    <comp lib="0" loc="(640,230)" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="labelloc" val="east"/>
      <a name="labelfont" val="SansSerif plain 20"/>
    </comp>
    <comp lib="8" loc="(170,501)" name="Text">
      <a name="text" val="https://en.wikipedia.org/wiki/Flip-flop_(electronics)"/>
    </comp>
    <comp lib="1" loc="(550,230)" name="NAND Gate"/>
    <comp lib="0" loc="(150,410)" name="Pin">
      <a name="labelloc" val="north"/>
      <a name="labelfont" val="SansSerif plain 20"/>
    </comp>
    <comp lib="8" loc="(78,419)" name="Text">
      <a name="text" val="Data Input"/>
      <a name="font" val="SansSerif plain 18"/>
    </comp>
    <comp lib="8" loc="(66,217)" name="Text">
      <a name="text" val="Clock = 0 (Read)"/>
    </comp>
    <comp lib="0" loc="(150,240)" name="Pin"/>
  </circuit>
</project>
